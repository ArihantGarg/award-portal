generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://awardsadmin:123456@localhost:3306/awards2"
}

model User {
  id           Int              @id @default(autoincrement())
  name         String
  email        String           @unique
  Phone        String?
  password     String
  isActive     Boolean          @default(false)
  ieeeMemNo    String?
  ieeeMemLevel String?
  Instutue     String?
  Affiliation  String?
  committees   AwardCommittee[] @relation(name: "Member")
  chairs       AwardCommittee[] @relation(name: "Chair")
  admins       Admin[]          // One-to-many relationship with admins
  reviewers    Reviewer[]       // One-to-many relationship with reviewers
  applications Application[]    // One-to-many relationship with applications
}

model Admin {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model AwardCommittee {
  id      Int     @id @default(autoincrement())
  name    String
  members User[]  @relation(name: "Member")
  awards  Award[] // One-to-many relationship with awards
  chair   User    @relation(name: "Chair", fields: [chairId], references: [id])
  chairId Int
}

model Award {
  id           Int                @id @default(autoincrement())
  name         String
  committeeId  Int
  committee    AwardCommittee     @relation(fields: [committeeId], references: [id])
  fields       AwardField[]
  reviewers    Reviewer[] // Many-to-many relationship with users for reviewers
  rubrics      Rubric[] // One-to-many relationship with rubrics
  applications Application[] // One-to-many relationship with applications
}

model Application {
  id                Int                 @id @default(autoincrement())
  awardId           Int
  award             Award               @relation(fields: [awardId], references: [id])
  userId            Int
  user              User                @relation(fields: [userId], references: [id])
  ApplicantResponse ApplicantResponse[]
  ExtraReviewers    Reviewer[]          @relation(name: "ExtraReviewer")
  Score             Score[]
}

model AwardField {
  id                Int                 @id @default(autoincrement())
  content           String
  awardId           Int
  award             Award               @relation(fields: [awardId], references: [id])
  fieldtype         AnswerType
  choices           Choice[]
  ApplicantResponse ApplicantResponse[]
}

model Choice {
  id          Int         @id @default(autoincrement())
  content     String
  field       AwardField  @relation(fields: [fieldId], references: [id])
  fieldId     Int
}

model ApplicantResponse {
  id            Int              @id @default(autoincrement())
  content       String
  application   Application      @relation(fields: [applicationId], references: [id])
  applicationId Int
  field         AwardField @relation(fields: [fieldId], references: [id])
  fieldId       Int
}

model Reviewer {
  id     Int     @id @default(autoincrement())
  userId Int
  user   User    @relation(fields: [userId], references: [id])
  awards Award[] // Many-to-many relationship with awards
  scores Score[] // One-to-many relationship with scores
  applications Application[] @relation(name: "ExtraReviewer")
}

model Score {
  id            Int         @id @default(autoincrement())
  value         Float
  rubric        Rubric      @relation(fields: [rubricId], references: [id])
  rubricId      Int
  reviewer      Reviewer    @relation(fields: [reviewerId], references: [id])
  reviewerId    Int
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId Int

  @@unique([reviewerId, applicationId, rubricId])
}

model Rubric {
  id      Int     @id @default(autoincrement())
  name    String
  max     Float     // Maximum score for this rubric
  scores  Score[]   // One-to-many relationship with scores
  award   Award   @relation(fields: [awardId], references: [id])
  awardId Int
}

enum AnswerType {
  TEXT
  TEXTAREA
  NUMBER
  BOOLEAN
  FILE
}